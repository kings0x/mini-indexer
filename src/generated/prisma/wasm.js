
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProcessedEventScalarFieldEnum = {
  eventId: 'eventId',
  txHash: 'txHash',
  logIndex: 'logIndex',
  eventType: 'eventType',
  createdAt: 'createdAt'
};

exports.Prisma.IndexerMetaScalarFieldEnum = {
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessedBlockScalarFieldEnum = {
  blockNumber: 'blockNumber',
  blockHash: 'blockHash',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  orderHash: 'orderHash',
  txHash: 'txHash',
  logIndex: 'logIndex',
  blockNumber: 'blockNumber',
  status: 'status',
  isConfirmed: 'isConfirmed',
  isOrphaned: 'isOrphaned',
  rawOrder: 'rawOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Status = exports.$Enums.Status = {
  open: 'open',
  filled: 'filled',
  cancelled: 'cancelled',
  invalid: 'invalid'
};

exports.Prisma.ModelName = {
  ProcessedEvent: 'ProcessedEvent',
  IndexerMeta: 'IndexerMeta',
  ProcessedBlock: 'ProcessedBlock',
  Order: 'Order'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Admin\\Documents\\marketplace-main\\mini-indexer\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Admin\\Documents\\marketplace-main\\mini-indexer\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n/**\n * Models inferred from your code:\n * - ProcessedEvent    (prisma.processedEvent)\n * - IndexerMeta       (prisma.indexerMeta)\n * - ProcessedBlock    (prisma.processedBlock)\n * - Order             (prisma.order)\n */\n\nmodel ProcessedEvent {\n  // used in alreadyProcessed/findUnique and markEventProcessed/create\n  eventId   String   @id // used as unique id in makeEventId(txHash, logIndex)\n  txHash    String\n  logIndex  Int\n  eventType String\n  createdAt DateTime @default(now())\n\n  @@index([txHash, logIndex], name: \"idx_processed_event_tx_log\")\n}\n\nmodel IndexerMeta {\n  // used to store last_processed_block (key/value)\n  key       String   @id // e.g. \"last_processed_block\"\n  value     String // stored as string in your code (you parse Number when reading)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel ProcessedBlock {\n  // stores blockNumber -> blockHash for reorg detection; used in upsert/findUnique/deleteMany\n  blockNumber Int      @id // used as unique key in upsert/findUnique/deleteMany\n  blockHash   String\n  processedAt DateTime @default(now()) // updated when block is processed (code uses `proccesedAt: new Date()` -> fix typo)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  @@index([blockHash], name: \"idx_processed_block_hash\")\n}\n\nenum Status {\n  open\n  filled\n  cancelled\n  invalid\n}\n\nmodel Order {\n  // fields used across update/updateMany/findMany and event publishing\n  orderHash   String   @id // primary identifier for an order (used in update where { orderHash })\n  txHash      String?\n  logIndex    Int?\n  blockNumber Int? // used for confirmations / orphaning queries (lte, gte)\n  status      Status?\n  isConfirmed Boolean  @default(false) // updated by markOrdersAsConfirmed\n  isOrphaned  Boolean  @default(false) // set by markOrderAsOrphaned\n  rawOrder    Json? // raw event payload (raw: {eventName, args}) â€” store as JSON\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // helpful indexes to support the queries in your code\n  @@index([blockNumber], name: \"idx_order_blockNumber\")\n  @@index([isConfirmed, isOrphaned], name: \"idx_order_confirm_orphan\")\n  @@index([txHash, logIndex], name: \"idx_order_tx_log\")\n}\n",
  "inlineSchemaHash": "1ec62f50942b2914fac3e5dd359119c9812d4836c2f8eb059ad81ea68c012f12",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"ProcessedEvent\":{\"fields\":[{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"eventType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"IndexerMeta\":{\"fields\":[{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ProcessedBlock\":{\"fields\":[{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"blockHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"processedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Order\":{\"fields\":[{\"name\":\"orderHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"Status\"},{\"name\":\"isConfirmed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isOrphaned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rawOrder\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

